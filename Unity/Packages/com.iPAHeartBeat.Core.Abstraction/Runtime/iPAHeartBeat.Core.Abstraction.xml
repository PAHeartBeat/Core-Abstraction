<?xml version="1.0"?>
<doc>
    <assembly>
        <name>iPAHeartBeat.Core.Abstraction</name>
    </assembly>
    <members>
        <member name="T:iPAHeartBeat.Core.Abstraction.ICustomLogger">
            <summary>
            Basic Logger Infra structure to create Different type of logger and use it with game system.
            </summary>
        </member>
        <member name="P:iPAHeartBeat.Core.Abstraction.ICustomLogger.LogLevel">
            <summary>
            Gets or sets the Log level to records.
            </summary>
        </member>
        <member name="P:iPAHeartBeat.Core.Abstraction.ICustomLogger.IsLoggingEnabled">
            <summary>
            Gets or sets a value indicating whether flag system to active or deactivate particular logging system.
            </summary>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ICustomLogger.IsFlagEnumHasValue(iPAHeartBeat.Core.Abstraction.LogLevels,iPAHeartBeat.Core.Abstraction.LogLevels)">
            <summary>
            The Helper method to check Enum value is Bit-wise enum (Flagged Enum or not.)
            </summary>
            <param name="value">The Enum value need to check.</param>
            <param name="checkWith">The value which need to check in bitwise enum.</param>
            <returns>true if <paramref name="checkWith"/> is part of <paramref name="value"/> otherwise false.</returns>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ICustomLogger.LogDebug(System.String,System.Int32,System.Object,System.Object)">
            <summary>
            Log info in logger as Debug.
            </summary>
            <param name="feature">Name of the feature for which sending debug log are being added.</param>
            <param name="maskValue">the bit-wise masking value to filter debug log based on mask.</param>
            <param name="args">data to be logged in system.</param>
            <param name="context">Context or file which ais trying to add debug.</param>
            <returns>true if log are recorded by logger otherwise false.</returns>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ICustomLogger.LogWarning(System.String,System.Int32,System.Object,System.Object)">
            <summary>
            Log info in logger as Warning.
            </summary>
            <param name="feature">Name of the feature for which sending debug log are being added.</param>
            <param name="maskValue">the bit-wise masking value to filter debug log based on mask.</param>
            <param name="args">data to be logged in system.</param>
            <param name="context">Context or file which ais trying to add debug.</param>
            <returns>true if log are recorded by logger otherwise false.</returns>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ICustomLogger.LogError(System.String,System.Int32,System.Object,System.Object)">
            <summary>
            Log info in logger as Error.
            </summary>
            <param name="feature">Name of the feature for which sending debug log are being added.</param>
            <param name="maskValue">the bit-wise masking value to filter debug log based on mask.</param>
            <param name="args">data to be logged in system.</param>
            <param name="context">Context or file which ais trying to add debug.</param>
            <returns>true if log are recorded by logger otherwise false.</returns>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ICustomLogger.LogException(System.String,System.Int32,System.Exception,System.Object)">
            <summary>
            Log Exception in logger system.
            </summary>
            <param name="feature">Name of the feature for which sending debug log are being added.</param>
            <param name="maskValue">the bit-wise masking value to filter debug log based on mask.</param>
            <param name="ex">data to be logged in system.</param>
            <param name="context">Context or file which ais trying to add debug.</param>
            <returns>true if log are recorded by logger otherwise false.</returns>
        </member>
        <member name="T:iPAHeartBeat.Core.Abstraction.ILocalDataStore">
            <summary>
            Will Provide  to use basic Structure to use different kind of data storage option like PlayerPref or File or any other.
            </summary>
        </member>
        <member name="P:iPAHeartBeat.Core.Abstraction.ILocalDataStore.PendingKeys">
            <summary>
            Gets or set the list of the key which needs to be sync with server.
            </summary>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ILocalDataStore.ClearLocalData">
            <summary>
            Will Clear all local data from local cache.
            </summary>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ILocalDataStore.GetKey``1(System.String,``0)">
            <summary>
            Will Help to read key from Local data cache with typed/manged data type.
            </summary>
            <typeparam name="T">Type of the data which could be return from Data store.</typeparam>
            <param name="key">Data key to read.</param>
            <param name="defaultValue">Default value for the key if data is not availble in data store.</param>
            <returns>the typed data from the key or default value if data is not exists for data key.</returns>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ILocalDataStore.SetKey(System.String,System.Object)">
            <summary>
            Will Try to Write Data for a key on local data storage. data will be written without any encryption.
            </summary>
            <param name="key">Data key to read.</param>
            <param name="value">Un-encrypted data which need to be write on local storage.</param>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ILocalDataStore.SetKey(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Will Try to Write Data for a key on local data storage. data will be written either with encryption or without it based on Should Encrypt parameter.
            </summary>
            <param name="key">Data key to read.</param>
            <param name="value">Un-encrypted data which need to be write on local storage.</param>
            <param name="shouldEncrypt">Flag about should data write on local store with encryption on not.</param>
            <param name="willAddInPendingList">Flag about should data marked to pending list to sync..</param>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ILocalDataStore.UnMarkKey(System.String)">
            <summary>
            The Helper service to unmark the data keys for sync with server.
            </summary>
            <param name="key">The data key which needs to unmark.</param>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ILocalDataStore.UnMarkKeys(System.Collections.Generic.List{System.String})">
            <summary>
            The Helper service to removes multiple key for server sync list.
            </summary>
            <param name="keys">The collection of the keys which needs to be unmark.</param>
        </member>
        <member name="T:iPAHeartBeat.Core.Abstraction.IMasterLogger">
            <summary>
            Basic Logger Infra structure to create Different type of logger and use it with game system.
            </summary>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.IMasterLogger.RegisterLogger(System.String,iPAHeartBeat.Core.Abstraction.ICustomLogger)">
            <summary>
            The Helper service to Register loggers to process logs.
            </summary>
            <param name="loggerId">The unique identifer of the logger implementation.</param>
            <param name="logger">The instance of the <see ref="ICustomLogger"/> Implementation.</param>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.IMasterLogger.RemoveLogger(System.String)">
            <summary>
            Will Remove the logger system from internal Logger collection for specified logger id..
            </summary>
            <param name="loggerId">The unique identifier for the logger implementation.</param>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.IMasterLogger.GetLogger(System.String)">
            <summary>
            Will return the reference of the logger implementation for specified logger id.
            </summary>
            <param name="loggerId">The unique identifier for the logger implementation.</param>
            <returns>The instance of logger system if exists otherwise null.</returns>
        </member>
        <member name="T:iPAHeartBeat.Core.Abstraction.SimpleEvent">
            <summary>
            Sends the Simple event without any input or output.
            </summary>
        </member>
        <member name="T:iPAHeartBeat.Core.Abstraction.INotifiable">
            <summary>
            The system fr the share count of changes and/or addition in particular feature to display Notification on UI.
            </summary>
        </member>
        <member name="P:iPAHeartBeat.Core.Abstraction.INotifiable.NotificationCount">
            <summary>
            Gets the count of changes and/or additions.
            </summary>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.INotifiable.SubscribeChanges(iPAHeartBeat.Core.Abstraction.SimpleEvent)">
            <summary>
            The helper method to the subscribe or listen Notification Changes info.
            </summary>
            <param name="listener">The reference of the method which needs to be added as listener.</param>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.INotifiable.UnsubscribeChanges(iPAHeartBeat.Core.Abstraction.SimpleEvent)">
            <summary>
            the helper method to the unsubscribe or cancel listen notification changes info.
            </summary>
            <param name="listener">The reference of the method which needs to be removed from listener.</param>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.INotifiable.Notify">
            <summary>
            The Open Helper method to Inform all listener about changes.
            </summary>
        </member>
        <member name="T:iPAHeartBeat.Core.Abstraction.INotificationUpdater">
            <summary>
            The System which can not just have notification option but with this it's have open system to change or reset the count of changes and/or addition.
            </summary>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.INotificationUpdater.Reset">
            <summary>
            This will reset count to zero for changes and/or addition.
            </summary>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.INotificationUpdater.Reduce(System.UInt32)">
            <summary>
            This will reduce the count of changes and/or addition.
            </summary>
            <param name="change">The count needs to reduce from current count.</param>
        </member>
        <member name="T:iPAHeartBeat.Core.Abstraction.ISignalManager">
            <summary>
            This interface will provide basic infrastructure to use different Signal System with different kind on internal system.
            </summary>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ISignalManager.DelayedFire``1(``0,System.Single)">
            <summary>
            Will Execute the Signal with delay. Delay will be managed by Threading and execution of actual signal will happens with separate thread. Which could cause issue in certain system which are not allowed other than main thread of the application.
            </summary>
            <typeparam name="T">Signal type.</typeparam>
            <param name="data">Data with as same signal type which need pass with module or system.</param>
            <param name="wait">wait time in seconds before it will executes.</param>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ISignalManager.Fire``1(``0)">
            <summary>
            Will Execute the Signal instant in same thread from where execution asked.
            </summary>
            <typeparam name="T">Signal type.</typeparam>
            <param name="data">Data with as same signal type which need pass with module or system.</param>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ISignalManager.SubscribeSignal``1(System.Action{``0})">
            <summary>
            Will register/subscribe a method which has a parametr of same signal type as Listener of signal for the particular signal type. If the method is already subscribed for particular signal, it will not be re-added as duplicate listener to avoid multiple call of a single listener and ignored silently without any error.
            </summary>
            <typeparam name="T">Signal type.</typeparam>
            <param name="handler">Reference of the method or action which will be executed when Signal fired.</param>
        </member>
        <member name="M:iPAHeartBeat.Core.Abstraction.ISignalManager.UnsubscribeSignal``1(System.Action{``0})">
            <summary>
            Will unregister/unsubscribe  method which subscribed to listen signals to execute. If method is not subscribed for particular signal type it will be silently ignored without any error.
            </summary>
            <typeparam name="T">Signal type.</typeparam>
            <param name="handler">Reference of the method or action which will be executed when Signal fired.</param>
        </member>
        <member name="T:iPAHeartBeat.Core.Abstraction.LogLevels">
            <summary>
            bitwise Enumeration for the different kind of the logs Levels.
            </summary>
        </member>
        <member name="F:iPAHeartBeat.Core.Abstraction.LogLevels.Log">
            <summary>
            Common Log level for debug or information.
            </summary>
        </member>
        <member name="F:iPAHeartBeat.Core.Abstraction.LogLevels.Warning">
            <summary>
            Level for major thing which is not right but not break the Code or application.
            </summary>
        </member>
        <member name="F:iPAHeartBeat.Core.Abstraction.LogLevels.Error">
            <summary>
            The Major issue that can or did break the code or the application.
            </summary>
        </member>
        <member name="F:iPAHeartBeat.Core.Abstraction.LogLevels.Exception">
            <summary>
            The level of the issue which either handled or not but it needs to report.
            </summary>
        </member>
    </members>
</doc>
